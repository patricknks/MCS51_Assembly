;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Tue May 18 2021
; Processor: AT89C51
; Compiler:  ASEM-51 (Proteus)
;====================================================================

$NOMOD51
$INCLUDE (8051.MCU)

;====================================================================
; DEFINITIONS
;====================================================================

;====================================================================
; VARIABLES
;====================================================================

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
      org   0000h
      jmp   Start

;====================================================================
; CODE SEGMENT
;====================================================================

      org   0100h
Start:	      
;#####################################################################################################################  
;############################################## UART PARAM #######################################################
;#####################################################################################################################  
	    mov SCON,#01000010b
	    mov tmod,#21H
	    clr TF0
	    mov th1,#-3
	    setb tr1
;################################################ INISIASI LCD ########################################################
	    clr p3.2 
	   
	    setb p3.3
	    
	    mov p1, #00111000B  ;Function Set
	    call setn
	    acall longdelay
	    
	    mov p1, #00000110B ;Entry Mode 
	    call setn 
	    acall longdelay
	    
	    mov p1, #00001100B ;Cursor Display
	    call setn 
	    acall longdelay
	    
	    mov p1, #00000001B ;Clear Display
	    call setn 
	    acall longdelay

  
;#####################################################################################################################  
;############################################### Power_MNG ########################################################
;#####################################################################################################################  
	    mov a,#00
	    mov p2,#03
	    call sinyal_start
	    mov R2,#11010000B
	    mov a,R2 
	    call sinyal_kirim
	    call sinyal_ack
	    mov R3,#06BH	
	    mov a,R3
	    call sinyal_kirim
	    call sinyal_ack
	    mov R3,#00H		
	    mov a,R3
	    call sinyal_kirim
	    call sinyal_ack
	    call sinyal_stop
;#####################################################################################################################  
;############################################### GYRO_CNFG ########################################################
;#####################################################################################################################  
	    mov a,#00
	    mov p2,#03
	    call sinyal_start
	    mov R2,#11010000B
	    mov a,R2 
	    call sinyal_kirim
	    call sinyal_ack
	    mov R3,#01BH	
	    mov a,R3
	    call sinyal_kirim
	    call sinyal_ack
	    mov R3,#00H		
	    mov a,R3
	    call sinyal_kirim
	    call sinyal_ack
	    call sinyal_stop

;#####################################################################################################################    
;############################################### START LOOP #########################################################
;#####################################################################################################################     
Loop0:
      mov 37H, #2d
      mov 36H,#4d
      mov R3,#039H
      mov R4,#57H
      call newline
      
Loop1:
      mov a,36H
      dec a
      mov 36H,a
      inc R3
      inc R3
      inc R4
      jz Loop0
Loop2:
      mov a,#00
      mov p2,#03
;############################################### Start Address ##########################################################
      mov R2,#11010000B
      call sinyal_start
      mov a,R2
      call sinyal_kirim
      call sinyal_ack
      mov a,R3
      call sinyal_kirim
      call sinyal_ack
      ;call sinyal_stop
      
      ;mov a,#00
      ;mov p2,#03
;################################################# I2C_READ ###########################################################      
      mov R2,#11010001B
      call sinyal_start
      mov a, R2
      call sinyal_kirim
      call sinyal_nack
      call sinyal_baca
      mov 30H,a
      mov a, 36H
      dec a
      jz min
      mov a,30H
positive:
      anl a,#10000000B
      cjne a,#00000000B, negative
      mov 31H,#02BH
      mov a,30H
uart_send:
      call calculation
     ; call sinyal_nack
      call sinyal_stop
      call delay
      jmp Loop1
min:
      mov a, 30H
      subb a,#26d
      mov 30H,a
      jmp positive
negative:
      mov 31H,#02DH
      mov a,30H
      cpl a
      mov 30H,a
      jmp uart_send
  
;#####################################################################################################################    
;################################################### I2C signal ########################################################### 
;#####################################################################################################################       

sinyal_kirim:;inisiasi untuk fungsi iterasi| 															|
      mov R1,#00;					|															|
       ;mov A,R0;					|															|
kirim:		;					|															|
 	   mov R0,A;					|															|
	   anl A,#10000000B;			|															|
	   cjne A,#10000000B,setL;		|															|
	   setb p2.1;					|															|
	   jmp pass;					|	FUNGSI UNTUK MENGIRIM DATA KE SLAVE SECARA BINER		|
setL:  clr p2.1	   ;					|															|
pass:  call sinyal_clock;				|															|
	    inc R1;						|															|
	   mov A,R0;					|															|
	   rl A;						|															|
	   cjne r1,#08, kirim;				|															|
	    ret;			
sinyal_baca:; inisiasi untuk iterasi	|	FUNGSI UNTUK KIRIM SINYAL CLOK KE SLAVE, UNTUK MENDAPATKAN DATA DARI SLAVE	|
	    mov R1,#00 ;				|																					|
	    mov a,#00;					|																					|
loop_baca: ;untuk iterasi 8 kali clock	|----------------------------------------------------------------------------------------------------------------------------	|
	    mov c,p2.1;					|						FUNGSI  HANYA UNTUK MENAMPILKAN HASIL					|
	    rlc a;						|					   PEMBACAAN KE A TERUS NANTINYA BISA KE PORT					| 
	    call sinyal_clock;				|----------------------------------------------------------------------------------------------------------------------------	|
	    inc R1;						|																					|
	    cjne R1,#08, loop_baca;		|																					|
	    ret;						|																					|
sinyal_nack:
      setb p2.1
      call sinyal_clock
      ret
sinyal_ack:
      clr p2.1
      call sinyal_clock
      ret
sinyal_start:
      setb p2.0
      call delay
      setb p2.1
      call delay
      clr p2.1
      call delay
      clr p2.0
      ret
sinyal_stop:
      setb p2.0
      call delay
      clr p2.1
      call delay
      setb p2.1
      ret
sinyal_clock:
      setb p2.0
      call delay
      clr p2.0
      ret
setn :
     clr p3.3
     setb p3.3
     ret


;############################################### CALCULATION ################################################
calculation:
			mov b,#2d
			mul ab
			mov b,#5d
			div ab
			add a, 30h
			mov b,#100d
			div ab
			add a,#48d	;convert ke ascii
			mov 32h,a
			mov a,b
			mov b,#10d
			div ab
			add a,#48d	;convert ke ascii
			mov 33h,a
			mov a,b
			add a,#48d	;convert ke ascii
			mov 34h,a
;############################################## SERIAL MONITOR ###############################################
			jnb ti,$
			setb p3.2
			setb p3.3
			mov p1, R4                       ;LCD1						
			mov SBUF,R4		;huruf X / Y / Z
			call setn
			;acall longdelay
			clr ti
			jnb ti,$	
			mov p1, #3Ah
			call setn
			;acall longdelay
			mov SBUF,#3Ah	;character " : "
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov p1,31h				;LCD2
			call setn
			;acall longdelay
			mov SBUF,31h		;character " + atau - "
			clr ti
			jnb ti,$
			mov p1,32h				;LCD3
			call setn
			;acall longdelay
			mov SBUF,32h		;angka 
			clr ti
			jnb ti,$
			mov p1,33h				;LCD4
			call setn
			;acall longdelay
			mov SBUF,33h		;angka 
			clr ti
			jnb ti,$
			mov p1,34h				;LCD5
			call setn
			;acall longdelay
			mov SBUF,34h		;angka
			clr ti
			jnb ti,$
			mov p1, #0DFh
			call setn
			;acall longdelay
			mov SBUF,#02ah	;character "derajat"
			clr ti
			jnb ti,$
			mov p1, #20h
			call setn
			;acall longdelay
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			jnb ti,$
			mov SBUF,#20h	;space
			clr ti
			djnz 37H, lanjuttt
			clr p3.2 
			setb p3.3
			mov p1, #0C0h
			call setn
lanjuttt:		ret
			
newline:
      call longdelay
      clr p3.2
      setb p3.3
      mov p1, #00000001B
      call setn
      jnb ti,$
      mov SBUF,#0AH
      clr ti
      jnb ti,$
      mov SBUF,#0DH
      clr ti
      ret

      

;################################################## Delay 1mS #######################################################
delay:       
      mov TL0, #00110000B      
      mov TH0, #11111111B      
      setb TR0      
      jnb TF0, $      
      clr TF0      
      clr TR0      
      ret
      
longdelay: ;To create a delay of 1sec ;
MOV R7,#32H ;100us * 100us * 100us = 1s
LOOOP1:MOV R6,#32H
LOOOP2:MOV R5,#64H
LOOOP3:DJNZ R5,LOOOP3
DJNZ R6,LOOOP2
DJNZ R7,LOOOP1
ret      
;====================================================================
      END
